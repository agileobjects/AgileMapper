// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.Extensions;
using AgileObjects.AgileMapper.ObjectPopulation;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class IntIEnumerableMapper : MappingExecutionContextBase<IEnumerable<int>>
    {
        public IntIEnumerableMapper
        (
            IEnumerable<int> source
        )
        : base(source)
        {
        }

        public ICollection<int> OnTo
        (
            ICollection<int> target
        )
        {
            return IntIEnumerableMapper.Merge(this.CreateRootMappingData(target));
        }

        private static ICollection<int> Merge
        (
            IObjectMappingData<IEnumerable<int>, ICollection<int>> iieToIicData
        )
        {
            try
            {
                var sourceIntIEnumerable = iieToIicData.Source.Exclude(iieToIicData.Target);
                ICollection<int> targetIntICollection = iieToIicData.Target.IsReadOnly ? new List<int>(iieToIicData.Target) : iieToIicData.Target;
                var i = 0;
                var enumerator = sourceIntIEnumerable.GetEnumerator();
                try
                {
                    while (true)
                    {
                        if (!enumerator.MoveNext())
                        {
                            break;
                        }

                        targetIntICollection.Add(enumerator.Current);
                        ++i;
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }

                return targetIntICollection;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "IEnumerable<int>",
                    "ICollection<int>",
                    ex);
            }
        }
    }
}