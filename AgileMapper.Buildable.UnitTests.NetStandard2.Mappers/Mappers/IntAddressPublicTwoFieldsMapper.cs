// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class IntAddressPublicTwoFieldsMapper : MappingExecutionContextBase<PublicTwoFields<int, Address>>
    {
        public IntAddressPublicTwoFieldsMapper
        (
            PublicTwoFields<int, Address> source
        )
        : base(source)
        {
        }

        public Dictionary<string, string> ToANew<TTarget>()
            where TTarget : Dictionary<string, string>
        {
            return IntAddressPublicTwoFieldsMapper.CreateNew(this.CreateRootMappingData(default(Dictionary<string, string>)));
        }

        private static Dictionary<string, string> CreateNew
        (
            IObjectMappingData<PublicTwoFields<int, Address>, Dictionary<string, string>> iaptfToSsdData
        )
        {
            try
            {
                var stringStringDictionary = new Dictionary<string, string>();
                stringStringDictionary["Value1"] = iaptfToSsdData.Source.Value1.ToString();

                if (iaptfToSsdData.Source.Value2 != null)
                {
                    stringStringDictionary["Value2.Line1"] = iaptfToSsdData.Source.Value2.Line1;
                    stringStringDictionary["Value2.Line2"] = iaptfToSsdData.Source.Value2.Line2;
                }

                return stringStringDictionary;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "PublicTwoFields<int, Address>",
                    "Dictionary<string, string>",
                    ex);
            }
        }
    }
}