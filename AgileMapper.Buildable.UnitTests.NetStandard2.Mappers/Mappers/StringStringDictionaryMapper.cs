// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.Extensions;
using AgileObjects.AgileMapper.Extensions.Internal;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;
using AgileObjects.ReadableExpressions;
using AgileObjects.ReadableExpressions.Extensions;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class StringStringDictionaryMapper : MappingExecutionContextBase<Dictionary<string, string>>
    {
        public StringStringDictionaryMapper
        (
            Dictionary<string, string> source
        )
        : base(source)
        {
        }

        public TTarget ToANew<TTarget>()
        {
            if (typeof(TTarget) == typeof(Address[]))
            {
                return (TTarget)((object)StringStringDictionaryMapper.CreateNew(this.CreateRootMappingData(default(Address[]))));
            }

            throw new NotSupportedException(
                "Unable to perform a 'CreateNew' mapping from source type 'Dictionary<string, string>' to target type '" + typeof(TTarget).GetFriendlyName(null) + "'");
        }

        private static Address[] CreateNew
        (
            IObjectMappingData<Dictionary<string, string>, Address[]> ssdToAaData
        )
        {
            Dictionary<string, string> sourceStringStringDictionary;
            try
            {
                sourceStringStringDictionary = ssdToAaData.Source;

                var stringStringDictionary_ValueCollection = sourceStringStringDictionary.Values;
                var addressList = new List<Address>(stringStringDictionary_ValueCollection.Count);
                var i = 0;
                while (true)
                {
                    var targetKey = "[" + i + "]";

                    if (sourceStringStringDictionary.Keys.None(key => key.StartsWith(targetKey, StringComparison.OrdinalIgnoreCase)))
                    {
                        break;
                    }

                    addressList.Add(StringStringDictionaryMapper.GetAddress(i, sourceStringStringDictionary));
                    ++i;
                }

                return addressList.ToArray();
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "Dictionary<string, string>",
                    "Address[]",
                    ex);
            }
        }

        private static Address GetAddress
        (
            int i,
            Dictionary<string, string> sourceStringStringDictionary
        )
        {
            try
            {
                var address = new Address();
                var line1Key = "[" + i + "].Line1";

                if ((line1Key = sourceStringStringDictionary.Keys.FirstOrDefault(key => key.MatchesKey(line1Key, ".", new Regex("\\[[0-9]+\\]")))) != null)
                {
                    address.Line1 = sourceStringStringDictionary[line1Key];
                }
                var line2Key = "[" + i + "].Line2";

                if ((line2Key = sourceStringStringDictionary.Keys.FirstOrDefault(key => key.MatchesKey(line2Key, ".", new Regex("\\[[0-9]+\\]")))) != null)
                {
                    address.Line2 = sourceStringStringDictionary[line2Key];
                }

                return address;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "Dictionary<string, string>['Target'].[i]",
                    "Address[][i]",
                    ex);
            }
        }
    }
}