// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.Extensions;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class ProductArrayMapper : MappingExecutionContextBase<Product[]>
    {
        public ProductArrayMapper
        (
            Product[] source
        )
        : base(source)
        {
        }

        public IEnumerable<Product> OnTo
        (
            IEnumerable<Product> target
        )
        {
            return ProductArrayMapper.Merge(this.CreateRootMappingData(target));
        }

        private static IEnumerable<Product> Merge
        (
            IObjectMappingData<Product[], IEnumerable<Product>> paToPsData
        )
        {
            try
            {
                var collectionData = CollectionData.Create(paToPsData.Source, paToPsData.Target, p => p.ProductId);
                collectionData.Intersection.ForEach(
                    (existingSourceProduct, existingTargetProduct, idx) => ProductArrayMapper.GetProduct1(existingSourceProduct, existingTargetProduct));
                var sourceProducts = collectionData.NewSourceItems;
                var targetProducts = ProductArrayMapper.GetProductICollection(paToPsData);
                var i = 0;
                var enumerator = sourceProducts.GetEnumerator();
                try
                {
                    while (true)
                    {
                        if (!enumerator.MoveNext())
                        {
                            break;
                        }

                        targetProducts.Add(ProductArrayMapper.GetProduct2(enumerator));
                        ++i;
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }

                return targetProducts;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "Product[]",
                    "IEnumerable<Product>",
                    ex);
            }
        }

        private static Product GetProduct1
        (
            Product existingSourceProduct,
            Product existingTargetProduct
        )
        {
            try
            {
                if (existingSourceProduct == null)
                {
                    return null;
                }

                var sourceMegaProduct = existingSourceProduct as MegaProduct;

                if ((sourceMegaProduct != null) && ((existingTargetProduct == null) || (existingTargetProduct is MegaProduct)))
                {
                    return ProductArrayMapper.GetMegaProduct1(existingTargetProduct, sourceMegaProduct);
                }

                if (existingTargetProduct is MegaProduct)
                {
                    return ProductArrayMapper.GetMegaProduct2(existingTargetProduct, existingSourceProduct);
                }
                var product = existingTargetProduct ?? new Product();

                if (product.ProductId == null)
                {
                    product.ProductId = existingSourceProduct.ProductId;
                }

                if (product.Price == default(double))
                {
                    product.Price = existingSourceProduct.Price;
                }

                return product;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "Product[][i]",
                    "IEnumerable<Product>[i]",
                    ex);
            }
        }

        private static MegaProduct GetMegaProduct1
        (
            Product existingTargetProduct,
            MegaProduct sourceMegaProduct
        )
        {
            try
            {
                var megaProduct = ((MegaProduct)existingTargetProduct) ?? new MegaProduct();

                if (megaProduct.HowMega == default(decimal))
                {
                    megaProduct.HowMega = sourceMegaProduct.HowMega;
                }

                if (megaProduct.ProductId == null)
                {
                    megaProduct.ProductId = sourceMegaProduct.ProductId;
                }

                if (megaProduct.Price == default(double))
                {
                    megaProduct.Price = sourceMegaProduct.Price;
                }

                return megaProduct;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "Product[][i]",
                    "IEnumerable<Product>[i]",
                    ex);
            }
        }

        private static MegaProduct GetMegaProduct2
        (
            Product existingTargetProduct,
            Product existingSourceProduct
        )
        {
            try
            {
                var megaProduct = ((MegaProduct)existingTargetProduct) ?? new MegaProduct();
                // No data sources for HowMega

                if (megaProduct.ProductId == null)
                {
                    megaProduct.ProductId = existingSourceProduct.ProductId;
                }

                if (megaProduct.Price == default(double))
                {
                    megaProduct.Price = existingSourceProduct.Price;
                }

                return megaProduct;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "Product[][i]",
                    "IEnumerable<Product>[i]",
                    ex);
            }
        }

        private static ICollection<Product> GetProductICollection
        (
            IObjectMappingData<Product[], IEnumerable<Product>> paToPsData
        )
        {
            ICollection<Product> collection;
            return ((collection = paToPsData.Target as ICollection<Product>) != null)
                ? collection.IsReadOnly ? new List<Product>(paToPsData.Target) : collection
                : new List<Product>(paToPsData.Target);
        }

        private static Product GetProduct2
        (
            IEnumerator<Product> enumerator
        )
        {
            try
            {
                if (enumerator.Current == null)
                {
                    return null;
                }

                var sourceMegaProduct = enumerator.Current as MegaProduct;

                if (sourceMegaProduct != null)
                {
                    return ProductArrayMapper.GetMegaProduct(sourceMegaProduct);
                }
                var product = new Product();

                if (product.ProductId == null)
                {
                    product.ProductId = enumerator.Current.ProductId;
                }

                if (product.Price == default(double))
                {
                    product.Price = enumerator.Current.Price;
                }

                return product;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "Product[][i]",
                    "IEnumerable<Product>[i]",
                    ex);
            }
        }

        private static MegaProduct GetMegaProduct
        (
            MegaProduct sourceMegaProduct
        )
        {
            try
            {
                var megaProduct = new MegaProduct();

                if (megaProduct.HowMega == default(decimal))
                {
                    megaProduct.HowMega = sourceMegaProduct.HowMega;
                }

                if (megaProduct.ProductId == null)
                {
                    megaProduct.ProductId = sourceMegaProduct.ProductId;
                }

                if (megaProduct.Price == default(double))
                {
                    megaProduct.Price = sourceMegaProduct.Price;
                }

                return megaProduct;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "Product[][i]",
                    "IEnumerable<Product>[i]",
                    ex);
            }
        }
    }
}