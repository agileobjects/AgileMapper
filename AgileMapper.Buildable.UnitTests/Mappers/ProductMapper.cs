// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class ProductMapper : MappingExecutionContextBase<Product>
    {
        public ProductMapper
        (
            Product source
        )
        : base(source)
        {
        }

        public ProductDto ToANew<TTarget>()
            where TTarget : ProductDto
        {
            return ProductMapper.CreateNew(this.CreateRootMappingData(default(ProductDto)));
        }

        private static ProductDto CreateNew
        (
            IObjectMappingData<Product, ProductDto> pToPdData
        )
        {
            Product sourceProduct;
            try
            {
                sourceProduct = pToPdData.Source;

                var sourceMegaProduct = sourceProduct as MegaProduct;

                if (sourceMegaProduct != null)
                {
                    return ProductMapper.GetProductDtoMega(sourceMegaProduct);
                }
                var productDto = new ProductDto();
                productDto.ProductId = sourceProduct.ProductId;
                productDto.Price = ((sourceProduct.Price >= ((double)-79228162514264337593543950335m)) &&
                    (sourceProduct.Price <= ((double)79228162514264337593543950335m)))
                    ? (decimal)sourceProduct.Price
                    : default(decimal);

                return productDto;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "Product",
                    "ProductDto",
                    ex);
            }
        }

        private static ProductDtoMega GetProductDtoMega
        (
            MegaProduct sourceMegaProduct
        )
        {
            try
            {
                var productDtoMega = new ProductDtoMega();
                productDtoMega.HowMega = sourceMegaProduct.HowMega.ToString();
                productDtoMega.ProductId = sourceMegaProduct.ProductId;
                productDtoMega.Price = ((sourceMegaProduct.Price >= ((double)-79228162514264337593543950335m)) &&
                    (sourceMegaProduct.Price <= ((double)79228162514264337593543950335m)))
                    ? (decimal)sourceMegaProduct.Price
                    : default(decimal);

                return productDtoMega;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "MegaProduct",
                    "ProductDtoMega",
                    ex);
            }
        }
    }
}