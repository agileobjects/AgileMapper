// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.ObjectPopulation;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class StringListMapper : MappingExecutionContextBase<List<string>>
    {
        public StringListMapper
        (
            List<string> source
        )
        : base(source)
        {
        }

        public Collection<byte?> ToANew<TTarget>()
            where TTarget : Collection<Nullable<byte>>
        {
            return StringListMapper.CreateNew(this.CreateRootMappingData(default(Collection<byte?>)));
        }

        private static Collection<byte?> CreateNew
        (
            IObjectMappingData<List<string>, Collection<byte?>> ssToNbsData
        )
        {
            try
            {
                var strings = ssToNbsData.Source;
                var nullableBytes = new Collection<byte?>();
                var i = 0;
                while (true)
                {
                    if (i == strings.Count)
                    {
                        break;
                    }

                    nullableBytes.Add(StringListMapper.GetNullableByte(strings, i));
                    ++i;
                }

                return nullableBytes;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "List<string>",
                    "Collection<byte?>",
                    ex);
            }
        }

        private static byte? GetNullableByte
        (
            List<string> strings,
            int i
        )
        {
            byte byteValue;
            return byte.TryParse(strings[i], out byteValue) ? (byte?)byteValue : null;
        }
    }
}