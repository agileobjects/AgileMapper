// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.Extensions;
using AgileObjects.AgileMapper.ObjectPopulation;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class DecimalArrayMapper : MappingExecutionContextBase<decimal[]>
    {
        public DecimalArrayMapper
        (
            decimal[] source
        )
        : base(source)
        {
        }

        public HashSet<double> OnTo
        (
            HashSet<double> target
        )
        {
            return DecimalArrayMapper.Merge(this.CreateRootMappingData(target));
        }

        private static HashSet<double> Merge
        (
            IObjectMappingData<decimal[], HashSet<double>> daToDhsData
        )
        {
            try
            {
                var sourceDoubleIEnumerable = daToDhsData.Source.Project(d => (double)d).Exclude(daToDhsData.Target);
                var targetDoubleHashSet = daToDhsData.Target;
                var i = 0;
                var enumerator = sourceDoubleIEnumerable.GetEnumerator();
                try
                {
                    while (true)
                    {
                        if (!enumerator.MoveNext())
                        {
                            break;
                        }

                        targetDoubleHashSet.Add(enumerator.Current);
                        ++i;
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }

                return targetDoubleHashSet;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Merge",
                    "decimal[]",
                    "HashSet<double>",
                    ex);
            }
        }
    }
}