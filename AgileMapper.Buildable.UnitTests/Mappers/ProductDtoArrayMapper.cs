// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.Extensions;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class ProductDtoArrayMapper : MappingExecutionContextBase<ProductDto[]>
    {
        public ProductDtoArrayMapper
        (
            ProductDto[] source
        )
        : base(source)
        {
        }

        public ReadOnlyCollection<Product> Over
        (
            ReadOnlyCollection<Product> target
        )
        {
            return ProductDtoArrayMapper.Overwrite(this.CreateRootMappingData(target));
        }

        private static ReadOnlyCollection<Product> Overwrite
        (
            IObjectMappingData<ProductDto[], ReadOnlyCollection<Product>> pdaToProcData
        )
        {
            try
            {
                var collectionData = CollectionData.Create(
                    pdaToProcData.Source,
                    pdaToProcData.Target,
                    pd => pd.ProductId,
                    p => p.ProductId);
                collectionData.Intersection.ForEach(
                    (existingProductDto, existingProduct, idx) => ProductDtoArrayMapper.GetProduct1(existingProductDto, existingProduct));
                var productDtoIEnumerable = collectionData.NewSourceItems;
                var productList = new List<Product>(pdaToProcData.Target);
                collectionData.AbsentTargetItems.ForEach(p => productList.Remove(p));
                var i = 0;
                var enumerator = productDtoIEnumerable.GetEnumerator();
                try
                {
                    while (true)
                    {
                        if (!enumerator.MoveNext())
                        {
                            break;
                        }

                        productList.Add(ProductDtoArrayMapper.GetProduct1(enumerator));
                        ++i;
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }

                return productList.AsReadOnly();
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Overwrite",
                    "ProductDto[]",
                    "ReadOnlyCollection<Product>",
                    ex);
            }
        }

        private static Product GetProduct1
        (
            ProductDto existingProductDto,
            Product existingProduct
        )
        {
            try
            {
                if (existingProductDto == null)
                {
                    return null;
                }

                var sourceProductDtoMega = existingProductDto as ProductDtoMega;

                if (sourceProductDtoMega != null)
                {
                    return ProductDtoArrayMapper.GetProduct2(existingProduct, sourceProductDtoMega);
                }

                if (existingProduct is MegaProduct)
                {
                    return ProductDtoArrayMapper.GetMegaProduct(existingProduct, existingProductDto);
                }
                var product = existingProduct ?? new Product();
                product.ProductId = existingProductDto.ProductId;
                product.Price = (double)existingProductDto.Price;

                return product;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Overwrite",
                    "ProductDto[][i]",
                    "ReadOnlyCollection<Product>[i]",
                    ex);
            }
        }

        private static Product GetProduct2
        (
            Product existingProduct,
            ProductDtoMega sourceProductDtoMega
        )
        {
            try
            {
                var product = existingProduct ?? new Product();
                product.ProductId = sourceProductDtoMega.ProductId;
                product.Price = (double)sourceProductDtoMega.Price;

                return product;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Overwrite",
                    "ProductDto[][i]",
                    "ReadOnlyCollection<Product>[i]",
                    ex);
            }
        }

        private static MegaProduct GetMegaProduct
        (
            Product existingProduct,
            ProductDto existingProductDto
        )
        {
            try
            {
                var megaProduct = ((MegaProduct)existingProduct) ?? new MegaProduct();
                // No data sources for HowMega
                megaProduct.ProductId = existingProductDto.ProductId;
                megaProduct.Price = (double)existingProductDto.Price;

                return megaProduct;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Overwrite",
                    "ProductDto[][i]",
                    "ReadOnlyCollection<Product>[i]",
                    ex);
            }
        }

        private static Product GetProduct1
        (
            IEnumerator<ProductDto> enumerator
        )
        {
            try
            {
                if (enumerator.Current == null)
                {
                    return null;
                }

                var sourceProductDtoMega = enumerator.Current as ProductDtoMega;

                if (sourceProductDtoMega != null)
                {
                    return ProductDtoArrayMapper.GetProduct2(sourceProductDtoMega);
                }
                var product = new Product();
                product.ProductId = enumerator.Current.ProductId;
                product.Price = (double)enumerator.Current.Price;

                return product;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Overwrite",
                    "ProductDto[][i]",
                    "ReadOnlyCollection<Product>[i]",
                    ex);
            }
        }

        private static Product GetProduct2
        (
            ProductDtoMega sourceProductDtoMega
        )
        {
            try
            {
                var product = new Product();
                product.ProductId = sourceProductDtoMega.ProductId;
                product.Price = (double)sourceProductDtoMega.Price;

                return product;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "Overwrite",
                    "ProductDto[][i]",
                    "ReadOnlyCollection<Product>[i]",
                    ex);
            }
        }
    }
}