// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;
using AgileObjects.NetStandardPolyfills;
using AgileObjects.ReadableExpressions;
using AgileObjects.ReadableExpressions.Extensions;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class StringPublicFieldMapper : MappingExecutionContextBase<PublicField<string>>
    {
        public StringPublicFieldMapper
        (
            PublicField<string> source
        )
        : base(source)
        {
        }

        public TTarget ToANew<TTarget>()
        {
            if (typeof(TTarget).IsAssignableTo(typeof(PublicField<int>)))
            {
                return (TTarget)((object)StringPublicFieldMapper.CreateNew(this.CreateRootMappingData(default(PublicField<int>))));
            }

            if (typeof(TTarget).IsAssignableTo(typeof(PublicProperty<string>)))
            {
                return (TTarget)((object)StringPublicFieldMapper.CreateNew(this.CreateRootMappingData(default(PublicProperty<string>))));
            }

            throw new NotSupportedException(
                "Unable to perform a 'CreateNew' mapping from source type 'PublicField<string>' to target type '" + typeof(TTarget).GetFriendlyName(null) + "'");
        }

        private static PublicField<int> CreateNew
        (
            IObjectMappingData<PublicField<string>, PublicField<int>> pfsToPfiData
        )
        {
            try
            {
                var publicField_Int = new PublicField<int>();
                publicField_Int.Value = StringPublicFieldMapper.GetInt(pfsToPfiData);

                return publicField_Int;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "PublicField<string>",
                    "PublicField<int>",
                    ex);
            }
        }

        private static PublicProperty<string> CreateNew
        (
            IObjectMappingData<PublicField<string>, PublicProperty<string>> pfsToPpsData
        )
        {
            try
            {
                var publicProperty_String = new PublicProperty<string>();
                publicProperty_String.Value = pfsToPpsData.Source.Value;

                return publicProperty_String;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "PublicField<string>",
                    "PublicProperty<string>",
                    ex);
            }
        }

        private static int GetInt
        (
            IObjectMappingData<PublicField<string>, PublicField<int>> pfsToPfiData
        )
        {
            int intValue;
            return int.TryParse(pfsToPfiData.Source.Value, out intValue) ? intValue : default(int);
        }
    }
}