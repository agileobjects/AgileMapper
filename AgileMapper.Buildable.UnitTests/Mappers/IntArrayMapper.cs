// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.ObjectPopulation;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class IntArrayMapper : MappingExecutionContextBase<int[]>
    {
        public IntArrayMapper
        (
            int[] source
        )
        : base(source)
        {
        }

        public ReadOnlyCollection<int> ToANew<TTarget>()
            where TTarget : ReadOnlyCollection<int>
        {
            return IntArrayMapper.CreateNew(this.CreateRootMappingData(default(ReadOnlyCollection<int>)));
        }

        private static ReadOnlyCollection<int> CreateNew
        (
            IObjectMappingData<int[], ReadOnlyCollection<int>> iaToIsData
        )
        {
            try
            {
                var sourceIntArray = iaToIsData.Source;
                var targetInts = new List<int>(sourceIntArray.Length);
                var i = 0;
                while (true)
                {
                    if (i == sourceIntArray.Length)
                    {
                        break;
                    }

                    targetInts.Add(sourceIntArray[i]);
                    ++i;
                }

                return targetInts.AsReadOnly();
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "int[]",
                    "ReadOnlyCollection<int>",
                    ex);
            }
        }
    }
}