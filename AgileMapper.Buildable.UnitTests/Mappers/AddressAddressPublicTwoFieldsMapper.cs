// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class AddressAddressPublicTwoFieldsMapper : MappingExecutionContextBase<PublicTwoFields<Address, Address>>
    {
        public AddressAddressPublicTwoFieldsMapper
        (
            PublicTwoFields<Address, Address> source
        )
        : base(source)
        {
        }

        public PublicTwoFields<Address, Address> ToANew<TTarget>()
            where TTarget : PublicTwoFields<Address, Address>
        {
            return AddressAddressPublicTwoFieldsMapper.CreateNew(this.CreateRootMappingData(default(PublicTwoFields<Address, Address>)));
        }

        private static PublicTwoFields<Address, Address> CreateNew
        (
            IObjectMappingData<PublicTwoFields<Address, Address>, PublicTwoFields<Address, Address>> aaptfToAaptfData
        )
        {
            PublicTwoFields<Address, Address> sourceAddressAddressPublicTwoFields;
            try
            {
                sourceAddressAddressPublicTwoFields = aaptfToAaptfData.Source;

                var addressAddressPublicTwoFields = new PublicTwoFields<Address, Address>();

                if (sourceAddressAddressPublicTwoFields.Value1 != null)
                {
                    addressAddressPublicTwoFields.Value1 = AddressAddressPublicTwoFieldsMapper.GetAddress1(addressAddressPublicTwoFields, sourceAddressAddressPublicTwoFields);
                }

                if (sourceAddressAddressPublicTwoFields.Value2 != null)
                {
                    addressAddressPublicTwoFields.Value2 = AddressAddressPublicTwoFieldsMapper.GetAddress2(addressAddressPublicTwoFields, sourceAddressAddressPublicTwoFields);
                }

                return addressAddressPublicTwoFields;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "PublicTwoFields<Address, Address>",
                    "PublicTwoFields<Address, Address>",
                    ex);
            }
        }

        private static Address GetAddress1
        (
            PublicTwoFields<Address, Address> addressAddressPublicTwoFields,
            PublicTwoFields<Address, Address> sourceAddressAddressPublicTwoFields
        )
        {
            try
            {
                var address = addressAddressPublicTwoFields.Value1 ?? new Address();
                address.Line1 = sourceAddressAddressPublicTwoFields.Value1.Line1;
                address.Line2 = sourceAddressAddressPublicTwoFields.Value1.Line2;

                return address;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "PublicTwoFields<Address, Address>.Value1",
                    "PublicTwoFields<Address, Address>.Value1",
                    ex);
            }
        }

        private static Address GetAddress2
        (
            PublicTwoFields<Address, Address> addressAddressPublicTwoFields,
            PublicTwoFields<Address, Address> sourceAddressAddressPublicTwoFields
        )
        {
            try
            {
                var address = addressAddressPublicTwoFields.Value2 ?? new Address();
                address.Line1 = sourceAddressAddressPublicTwoFields.Value2.Line1;
                address.Line2 = sourceAddressAddressPublicTwoFields.Value2.Line2;

                return address;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "PublicTwoFields<Address, Address>.Value2",
                    "PublicTwoFields<Address, Address>.Value2",
                    ex);
            }
        }
    }
}