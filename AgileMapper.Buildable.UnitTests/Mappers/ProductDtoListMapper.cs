// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by AgileObjects.AgileMapper.Buildable.
// Runtime Version: 0.1.0.0
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using AgileObjects.AgileMapper;
using AgileObjects.AgileMapper.ObjectPopulation;
using AgileObjects.AgileMapper.UnitTests.Common.TestClasses;

namespace AgileObjects.AgileMapper.Buildable.UnitTests.Mappers
{
    [GeneratedCode("AgileObjects.AgileMapper.Buildable", "0.1.0.0")]
    public class ProductDtoListMapper : MappingExecutionContextBase<List<ProductDto>>
    {
        public ProductDtoListMapper
        (
            List<ProductDto> source
        )
        : base(source)
        {
        }

        public IList<ProductDto> ToANew<TTarget>()
            where TTarget : IList<ProductDto>
        {
            return ProductDtoListMapper.CreateNew(this.CreateRootMappingData(default(IList<ProductDto>)));
        }

        private static IList<ProductDto> CreateNew
        (
            IObjectMappingData<List<ProductDto>, IList<ProductDto>> pdsToPdsData
        )
        {
            try
            {
                var sourceProductDtos = pdsToPdsData.Source;
                var targetProductDtos = new List<ProductDto>(sourceProductDtos.Count);
                var i = 0;
                while (true)
                {
                    if (i == sourceProductDtos.Count)
                    {
                        break;
                    }

                    var sourceProductDto = sourceProductDtos[i];
                    targetProductDtos.Add(ProductDtoListMapper.GetProductDto(sourceProductDto));
                    ++i;
                }

                return targetProductDtos;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "List<ProductDto>",
                    "IList<ProductDto>",
                    ex);
            }
        }

        private static ProductDto GetProductDto
        (
            ProductDto sourceProductDto
        )
        {
            try
            {
                if (sourceProductDto == null)
                {
                    return null;
                }

                var sourceProductDtoMega = sourceProductDto as ProductDtoMega;

                if (sourceProductDtoMega != null)
                {
                    return ProductDtoListMapper.GetProductDtoMega(sourceProductDtoMega);
                }
                var productDto = new ProductDto();
                productDto.ProductId = sourceProductDto.ProductId;
                productDto.Price = sourceProductDto.Price;

                return productDto;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "List<ProductDto>[i]",
                    "IList<ProductDto>[i]",
                    ex);
            }
        }

        private static ProductDtoMega GetProductDtoMega
        (
            ProductDtoMega sourceProductDtoMega
        )
        {
            try
            {
                var productDtoMega = new ProductDtoMega();
                productDtoMega.HowMega = sourceProductDtoMega.HowMega;
                productDtoMega.ProductId = sourceProductDtoMega.ProductId;
                productDtoMega.Price = sourceProductDtoMega.Price;

                return productDtoMega;
            }
            catch (Exception ex)
            {
                throw MappingException.For(
                    "CreateNew",
                    "List<ProductDto>[i]",
                    "IList<ProductDto>[i]",
                    ex);
            }
        }
    }
}